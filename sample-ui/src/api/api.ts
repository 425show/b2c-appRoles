/* tslint:disable */
/* eslint-disable */
/**
 * B2C Authorization Administration
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AppRoleAssignment
 */
export interface AppRoleAssignment {
    [key: string]: object | any;

    /**
     * 
     * @type {string}
     * @memberof AppRoleAssignment
     */
    appRoleId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AppRoleAssignment
     */
    createdDateTime?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AppRoleAssignment
     */
    principalDisplayName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AppRoleAssignment
     */
    principalId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AppRoleAssignment
     */
    principalType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AppRoleAssignment
     */
    resourceDisplayName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AppRoleAssignment
     */
    resourceId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AppRoleAssignment
     */
    deletedDateTime?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AppRoleAssignment
     */
    id?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AppRoleAssignment
     */
    odata_type?: string | null;
}

/**
 * ApplicationsApi - axios parameter creator
 * @export
 */
export const ApplicationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} v 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vvApplicationsGet: async (v: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            if (v === null || v === undefined) {
                throw new RequiredError('v','Required parameter v was null or undefined when calling vvApplicationsGet.');
            }
            const localVarPath = `/v{v}/applications`
                .replace(`{${"v"}}`, encodeURIComponent(String(v)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} resourceId 
         * @param {string} v 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vvServicePrincipalsResourceIdAppRolesGet: async (resourceId: string, v: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'resourceId' is not null or undefined
            if (resourceId === null || resourceId === undefined) {
                throw new RequiredError('resourceId','Required parameter resourceId was null or undefined when calling vvServicePrincipalsResourceIdAppRolesGet.');
            }
            // verify required parameter 'v' is not null or undefined
            if (v === null || v === undefined) {
                throw new RequiredError('v','Required parameter v was null or undefined when calling vvServicePrincipalsResourceIdAppRolesGet.');
            }
            const localVarPath = `/v{v}/servicePrincipals/{resourceId}/appRoles`
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)))
                .replace(`{${"v"}}`, encodeURIComponent(String(v)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} resourceId 
         * @param {string} v 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vvServicePrincipalsResourceIdGet: async (resourceId: string, v: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'resourceId' is not null or undefined
            if (resourceId === null || resourceId === undefined) {
                throw new RequiredError('resourceId','Required parameter resourceId was null or undefined when calling vvServicePrincipalsResourceIdGet.');
            }
            // verify required parameter 'v' is not null or undefined
            if (v === null || v === undefined) {
                throw new RequiredError('v','Required parameter v was null or undefined when calling vvServicePrincipalsResourceIdGet.');
            }
            const localVarPath = `/v{v}/servicePrincipals/{resourceId}`
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)))
                .replace(`{${"v"}}`, encodeURIComponent(String(v)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} v 
         * @param {string} servicePrincipalId 
         * @param {string} [resourceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vvServicePrincipalsServicePrincipalIdAppRoleAssignedToGet: async (v: string, servicePrincipalId: string, resourceId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            if (v === null || v === undefined) {
                throw new RequiredError('v','Required parameter v was null or undefined when calling vvServicePrincipalsServicePrincipalIdAppRoleAssignedToGet.');
            }
            // verify required parameter 'servicePrincipalId' is not null or undefined
            if (servicePrincipalId === null || servicePrincipalId === undefined) {
                throw new RequiredError('servicePrincipalId','Required parameter servicePrincipalId was null or undefined when calling vvServicePrincipalsServicePrincipalIdAppRoleAssignedToGet.');
            }
            const localVarPath = `/v{v}/servicePrincipals/{servicePrincipalId}/appRoleAssignedTo`
                .replace(`{${"v"}}`, encodeURIComponent(String(v)))
                .replace(`{${"servicePrincipalId"}}`, encodeURIComponent(String(servicePrincipalId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (resourceId !== undefined) {
                localVarQueryParameter['resourceId'] = resourceId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} v 
         * @param {string} servicePrincipalId 
         * @param {string} [resourceId] 
         * @param {{ [key: string]: object; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vvServicePrincipalsServicePrincipalIdAppRoleAssignedToPost: async (v: string, servicePrincipalId: string, resourceId?: string, requestBody?: { [key: string]: object; }, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            if (v === null || v === undefined) {
                throw new RequiredError('v','Required parameter v was null or undefined when calling vvServicePrincipalsServicePrincipalIdAppRoleAssignedToPost.');
            }
            // verify required parameter 'servicePrincipalId' is not null or undefined
            if (servicePrincipalId === null || servicePrincipalId === undefined) {
                throw new RequiredError('servicePrincipalId','Required parameter servicePrincipalId was null or undefined when calling vvServicePrincipalsServicePrincipalIdAppRoleAssignedToPost.');
            }
            const localVarPath = `/v{v}/servicePrincipals/{servicePrincipalId}/appRoleAssignedTo`
                .replace(`{${"v"}}`, encodeURIComponent(String(v)))
                .replace(`{${"servicePrincipalId"}}`, encodeURIComponent(String(servicePrincipalId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (resourceId !== undefined) {
                localVarQueryParameter['resourceId'] = resourceId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApplicationsApi - functional programming interface
 * @export
 */
export const ApplicationsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} v 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vvApplicationsGet(v: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ApplicationsApiAxiosParamCreator(configuration).vvApplicationsGet(v, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} resourceId 
         * @param {string} v 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vvServicePrincipalsResourceIdAppRolesGet(resourceId: string, v: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ApplicationsApiAxiosParamCreator(configuration).vvServicePrincipalsResourceIdAppRolesGet(resourceId, v, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} resourceId 
         * @param {string} v 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vvServicePrincipalsResourceIdGet(resourceId: string, v: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ApplicationsApiAxiosParamCreator(configuration).vvServicePrincipalsResourceIdGet(resourceId, v, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} v 
         * @param {string} servicePrincipalId 
         * @param {string} [resourceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vvServicePrincipalsServicePrincipalIdAppRoleAssignedToGet(v: string, servicePrincipalId: string, resourceId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ApplicationsApiAxiosParamCreator(configuration).vvServicePrincipalsServicePrincipalIdAppRoleAssignedToGet(v, servicePrincipalId, resourceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} v 
         * @param {string} servicePrincipalId 
         * @param {string} [resourceId] 
         * @param {{ [key: string]: object; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vvServicePrincipalsServicePrincipalIdAppRoleAssignedToPost(v: string, servicePrincipalId: string, resourceId?: string, requestBody?: { [key: string]: object; }, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ApplicationsApiAxiosParamCreator(configuration).vvServicePrincipalsServicePrincipalIdAppRoleAssignedToPost(v, servicePrincipalId, resourceId, requestBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ApplicationsApi - factory interface
 * @export
 */
export const ApplicationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} v 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vvApplicationsGet(v: string, options?: any): AxiosPromise<void> {
            return ApplicationsApiFp(configuration).vvApplicationsGet(v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} resourceId 
         * @param {string} v 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vvServicePrincipalsResourceIdAppRolesGet(resourceId: string, v: string, options?: any): AxiosPromise<void> {
            return ApplicationsApiFp(configuration).vvServicePrincipalsResourceIdAppRolesGet(resourceId, v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} resourceId 
         * @param {string} v 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vvServicePrincipalsResourceIdGet(resourceId: string, v: string, options?: any): AxiosPromise<void> {
            return ApplicationsApiFp(configuration).vvServicePrincipalsResourceIdGet(resourceId, v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} v 
         * @param {string} servicePrincipalId 
         * @param {string} [resourceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vvServicePrincipalsServicePrincipalIdAppRoleAssignedToGet(v: string, servicePrincipalId: string, resourceId?: string, options?: any): AxiosPromise<void> {
            return ApplicationsApiFp(configuration).vvServicePrincipalsServicePrincipalIdAppRoleAssignedToGet(v, servicePrincipalId, resourceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} v 
         * @param {string} servicePrincipalId 
         * @param {string} [resourceId] 
         * @param {{ [key: string]: object; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vvServicePrincipalsServicePrincipalIdAppRoleAssignedToPost(v: string, servicePrincipalId: string, resourceId?: string, requestBody?: { [key: string]: object; }, options?: any): AxiosPromise<void> {
            return ApplicationsApiFp(configuration).vvServicePrincipalsServicePrincipalIdAppRoleAssignedToPost(v, servicePrincipalId, resourceId, requestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ApplicationsApi - object-oriented interface
 * @export
 * @class ApplicationsApi
 * @extends {BaseAPI}
 */
export class ApplicationsApi extends BaseAPI {
    /**
     * 
     * @param {string} v 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public vvApplicationsGet(v: string, options?: any) {
        return ApplicationsApiFp(this.configuration).vvApplicationsGet(v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} resourceId 
     * @param {string} v 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public vvServicePrincipalsResourceIdAppRolesGet(resourceId: string, v: string, options?: any) {
        return ApplicationsApiFp(this.configuration).vvServicePrincipalsResourceIdAppRolesGet(resourceId, v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} resourceId 
     * @param {string} v 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public vvServicePrincipalsResourceIdGet(resourceId: string, v: string, options?: any) {
        return ApplicationsApiFp(this.configuration).vvServicePrincipalsResourceIdGet(resourceId, v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} v 
     * @param {string} servicePrincipalId 
     * @param {string} [resourceId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public vvServicePrincipalsServicePrincipalIdAppRoleAssignedToGet(v: string, servicePrincipalId: string, resourceId?: string, options?: any) {
        return ApplicationsApiFp(this.configuration).vvServicePrincipalsServicePrincipalIdAppRoleAssignedToGet(v, servicePrincipalId, resourceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} v 
     * @param {string} servicePrincipalId 
     * @param {string} [resourceId] 
     * @param {{ [key: string]: object; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public vvServicePrincipalsServicePrincipalIdAppRoleAssignedToPost(v: string, servicePrincipalId: string, resourceId?: string, requestBody?: { [key: string]: object; }, options?: any) {
        return ApplicationsApiFp(this.configuration).vvServicePrincipalsServicePrincipalIdAppRoleAssignedToPost(v, servicePrincipalId, resourceId, requestBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} v 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vvUsersGet: async (v: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            if (v === null || v === undefined) {
                throw new RequiredError('v','Required parameter v was null or undefined when calling vvUsersGet.');
            }
            const localVarPath = `/v{v}/Users`
                .replace(`{${"v"}}`, encodeURIComponent(String(v)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {string} v 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vvUsersUserIdAppRoleAssignmentsGet: async (userId: string, v: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling vvUsersUserIdAppRoleAssignmentsGet.');
            }
            // verify required parameter 'v' is not null or undefined
            if (v === null || v === undefined) {
                throw new RequiredError('v','Required parameter v was null or undefined when calling vvUsersUserIdAppRoleAssignmentsGet.');
            }
            const localVarPath = `/v{v}/Users/{userId}/appRoleAssignments`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"v"}}`, encodeURIComponent(String(v)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {string} v 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vvUsersUserIdGet: async (userId: string, v: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling vvUsersUserIdGet.');
            }
            // verify required parameter 'v' is not null or undefined
            if (v === null || v === undefined) {
                throw new RequiredError('v','Required parameter v was null or undefined when calling vvUsersUserIdGet.');
            }
            const localVarPath = `/v{v}/Users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"v"}}`, encodeURIComponent(String(v)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} v 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vvUsersGet(v: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).vvUsersGet(v, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {string} v 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vvUsersUserIdAppRoleAssignmentsGet(userId: string, v: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).vvUsersUserIdAppRoleAssignmentsGet(userId, v, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {string} v 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vvUsersUserIdGet(userId: string, v: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).vvUsersUserIdGet(userId, v, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} v 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vvUsersGet(v: string, options?: any): AxiosPromise<void> {
            return UsersApiFp(configuration).vvUsersGet(v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {string} v 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vvUsersUserIdAppRoleAssignmentsGet(userId: string, v: string, options?: any): AxiosPromise<void> {
            return UsersApiFp(configuration).vvUsersUserIdAppRoleAssignmentsGet(userId, v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {string} v 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vvUsersUserIdGet(userId: string, v: string, options?: any): AxiosPromise<void> {
            return UsersApiFp(configuration).vvUsersUserIdGet(userId, v, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @param {string} v 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public vvUsersGet(v: string, options?: any) {
        return UsersApiFp(this.configuration).vvUsersGet(v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userId 
     * @param {string} v 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public vvUsersUserIdAppRoleAssignmentsGet(userId: string, v: string, options?: any) {
        return UsersApiFp(this.configuration).vvUsersUserIdAppRoleAssignmentsGet(userId, v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userId 
     * @param {string} v 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public vvUsersUserIdGet(userId: string, v: string, options?: any) {
        return UsersApiFp(this.configuration).vvUsersUserIdGet(userId, v, options).then((request) => request(this.axios, this.basePath));
    }
}


